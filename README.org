#+TITLE: GO COMMIT
#+AUTHOR: HienHM
#+EMAIL: blackcat22121996@gmail.com

#+CAPTION: Commit gif
[[./assets/commit.gif]]
* Commit
*Commit* is a Golang-based CLI tool designed for better commit, it provides a clean, terminal-based form to help you input all the necessary details for your Git commits.
* Features
- *Interactive TUI:* Guides you through selecting commit-type, scope, work-item-id, commit title, and description.
- *Pre-defined Commit Options:* Choose from commit types like Feature, Fixbug, Documentation, Style, Refactor, Performance, Tests, and Maintenance.
* Installation
** Prerequisites
- [[https://golang.org/doc/install][Go]] 1.16 or later
- Git
** Build
#+begin_src bash
#+end_src
* Usage
1. Navigate to your Git repository:
   #+begin_src bash
     cd /path/to/your/git-repo
   #+end_src
2. Run the Commit tool:
   #+begin_src bash
     commit
   #+end_src
3. Follow the interactive prompts:
   - *Select Commit Type:* Choose from options such as Feature(~feat~), Fixbug(~fix~), etc.
   - *Enter Details*: Provide the scope, work-item-id, commit title, and an optional description.
   - *Confirm:* Once all fields are confirmed, confirm to commit.
* Personal Project Notes
- This project is a personal tool to streamline my Git commit workflow.
- Experimenting with Bubble Tea, Huh, and Lip Gloss to learn mode about TUI development in Go.
- The tool will envolve with new features as I learn more about effetive commit message structuring and interactive CLI design.
* TODOs
- [ ] Show git status: Display the current Git status before starting the commit process.
- [ ] Intergration: Automate the actual Git commit process after confirming the commit message.
- [ ] Customize Config: Implement a configuration file that let users override default settings.
- [ ] Testing: Add unit tests.
- [ ] Documentation: Improve documentation and add more examples in the README.
* License
This project is licensed under the MIT License.
